Program link:
https://www.hackerrank.com/contests/w25/challenges/append-and-delete/problem
Program:
You have a string, , of lowercase English alphabetic letters. You can perform two types of operations on :

Append a lowercase English alphabetic letter to the end of the string.
Delete the last character in the string. Performing this operation on an empty string results in an empty string.
Given an integer, , and two strings,  and , determine whether or not you can convert  to  by performing exactly  of the above operations on . If it's possible, print Yes; otherwise, print No.

Input Format

The first line contains a string, , denoting the initial string. 
The second line contains a string, , denoting the desired final string. The third line contains an integer, , denoting the desired number of operations.

Constraints

 and  consist of lowercase English alphabetic letters.
Output Format

Print Yes if you can obtain string  by performing exactly  operations on ; otherwise, print No.

Sample Input 0

hackerhappy
hackerrank
9
Sample Output 0

Yes
Explanation 0

We perform  delete operations to reduce string  to hacker. Next, we perform  append operations (i.e., r, a, n, and k), to get hackerrank. Because we were able to convert  to  by performing exactly  operations, we print Yes.

Sample Input 1

aba
aba
7
Sample Output 1

Yes
Explanation 1

We perform  delete operations to reduce string  to the empty string (recall that, though the string will be empty after  deletions, we can still perform a delete operation on an empty string to get the empty string). Next, we perform  append operations (i.e., a, b, and a). Because we were able to convert  to  by performing exactly  operations, we print Yes.

Sample Input 2

ashley
ash
2
Sample Output 2

No
Explanation 2

To convert ashley to ash a minimum of  steps are needed. Hence we print No as answer.
CodE:
import java.util.*;

class Solution {
    
    public static boolean solve(char[] s, char[] t, int k) {
        // We have more operations than we need to delete and rewrite the string
        if (s.length + t.length < k) {
            return true;
        }
        
        // Iterate through string matching characters
        int i = -1;
        while(i++ < Math.min(s.length, t.length) - 1) {
            if (s[i] != t[i]) {
                break;
            }
        }
        
        // The strings are the same
        if (i == s.length && s.length == t.length) {
            // if k is odd, there will always be 1 operation left over
            // else, you can delete and re-append last character to use up k operations
            return ((k & 1) == 1) ? false : true;
        }

        // Else
        // Reduce k by number of necessary deletions and insertions
        k = k - (s.length - i) - (t.length - i);

        // If k < 0 or there is an odd number of operations left over, false
        // else we need exactly k operations or the number of extra ops is even, true
        return (k < 0 || (k & 1) == 1) ? false : true;
        
    }
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        String t = in.next();
        int k = in.nextInt();
        in.close();
        
        System.out.println( (solve(s.toCharArray(), t.toCharArray(), k))
                           ? "Yes"
                           : "No"
                           );
    }
}
