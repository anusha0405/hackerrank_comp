Program link:https://www.hackerrank.com/contests/hourrank-25/challenges/constructing-a-number/problem
Program:
Manipulating numbers is at the core of a programmer's job. To test how well you know their properties, you are asked to solve the following problem.

You are given  non-negative integers , , ..., . You want to know whether it's possible to construct a new integer using all the digits of these numbers such that it would be divisible by . You can reorder the digits as you want. The resulting number can contain leading zeros.

For example, consider the numbers  from which you have to construct a new integer as described above. Numerous arrangements of digits are possible; but we have illustrated one below.

image

Complete the function canConstruct which takes an integer array as input and return "Yes" or "No" based on whether or not the required integer can be formed.

Input Format

The first line contains a single integer  denoting the number of queries. The following lines describe the queries.

Each query is described in two lines. The first of these lines contains a single integer . The second contains space-separated integers , , ..., .

Constraints

Subtasks

For 33.33% of the total score:

Output Format

For each query, print a single line containing "Yes" if it's possible to construct such integer and "No" otherwise.

Sample Input 0

3
1
9
3
40 50 90
2
1 4
Sample Output 0

Yes
Yes
No
Explanation 0

In the first example,  is divisible by , so the answer is "Yes".

In the second example you can construct the number  which is divisible by , so the answer is "Yes". Note that there may be other numbers you can construct, some of which are shown in the challenge statement.

In the third example, the only possible numbers are  and , but both of them are not divisible by , so the answer is "No".

Approach:
The simplest approach would be to merge all numbers into one, then take the sum of the individual digits that 
make up the number, lastly, if the sum is divisible by 3 then return "Yes", return No otherwise.
Code:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static String canConstruct(int[] arr) {
        int n=arr.length;
        int sum=0;
        for(int i=0;i<n;i++){
            while(arr[i]!=0){
                sum+=(arr[i]%10);
                arr[i]=arr[i]/10;  
            }
        }
            if((sum%3)==0)
                return "Yes";
            else 
                return "No";
    }


    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            int n = in.nextInt();
            int[] a = new int[n];
            for(int a_i = 0; a_i < n; a_i++){
                a[a_i] = in.nextInt();
            }
            String result = canConstruct(a);
            System.out.println(result);
        }
        in.close();
    }
}
