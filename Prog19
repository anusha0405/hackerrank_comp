Program link:
https://www.hackerrank.com/contests/w32/challenges/fight-the-monsters/problem
Program:
Jason is trapped in a forest with  hungry monsters and must use his trusty blaster to defend himself! Each monster  has a health value, . Jason can discharge his blaster at a monster once per second and reduce its health points by  units. Once a monster's health points become , it dies.

Given the health values for each monster and an integer, , can you determine the maximum number of monsters he can kill in  seconds? Assume Jason always hits his target!

Input Format

The first line consists of three space-separated integers describing the respective values of , , and . 
The second line consists of  space-separated integers describing the values of .

Constraints

Output Format

Print an integer denoting the maximum number of monsters Jason can kill in  seconds.

Sample Input 0

7 8 6
16 19 7 11 23 8 16
Sample Output 0

4
Explanation 0

We want to find the maximum number of monsters we can kill in  seconds using a blaster that does units of damage per second. The diagram below depicts the array of initial health values, :

image
The optimal approach is as follows:

Shoot monster  so , monster  dies, and  becomes :

image
Shoot monster  so , monster  dies, and  becomes :

image
Shoot monster  so  and  becomes :

image
Shoot monster  again so , monster  dies, and  becomes : 
image
Shoot monster  so  and  becomes : 
image
Shoot monster  again so , monster  dies, and  becomes : image
Thus, we print  as the maximum number of monsters we can kill in the given time period.
Code:
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int getMaxMonsters(int n, int hit, int t, int[] h){
        // Complete this function
         Arrays.sort(h);
    
    int killCount = 0;
    int index = 0;

    // Simulate each second that passes
    while (t-- > 0) {
        // If all the monsters are dead, stop looking for additional monsters
        if (index >= h.length) {
            // You could also return 'n' here, but the value of killCount is already 'n'.
            break;
        }

        // Simulate a hit: reduce the monster's health value
        h[index] = h[index] - hit;

        // If the monster was hit enough times to be dead:
        // 1. Increment killCount
        // 2. Move on to the next monster
        if (h[index] <= 0) {
            killCount++;
            index++;
        }
    }

    return killCount;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int hit = in.nextInt();
        int t = in.nextInt();
        int[] h = new int[n];
        for(int h_i=0; h_i < n; h_i++){
            h[h_i] = in.nextInt();
        }
        int result = getMaxMonsters(n, hit, t, h);
        System.out.println(result);
    }
}
