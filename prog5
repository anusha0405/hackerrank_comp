Program link:
https://www.hackerrank.com/contests/w36/challenges/revised-russian-roulette/problem
In the original version of Russian Roulette, there are active and inactive zones a contestant has to pass through to win, and also a trap door.

You are playing a revised version of the game, where, you have to unlock all doors in a given setting, in a given fashion, to enter the playig area.

Initially, any door is either locked or unlocked.
If a door is locked and you unlock it, then
if the next consecutive door is locked, it will automatically get unlocked.
if the next consecutive door is already unlocked, nothing will happen.
there will be no effect on any following door.
For example, if there are  doors as shown below, where  denotes an unlocked door, and  denotes a locked door, a minimum of  operations, will be required to unlock all doors.

image

Note: You are allowed to unlock the doors in any order you wish.

Complete the function revisedRussianRoulette that takes an integer array denoting  status of each door in the array, and return an integer array denoting the minimum and maximum number of unlock operations needed to unlock all the doors.

Input Format

The first line contains a single integer , denoting the total number of doors.

The next line contains  space separated integers, either  or .  denotes a locked door and  denotes an unlocked door.

Constraints

Output Format

Print two integers separated by one space, denoting the minimum and maximum number of unlock operations needed respectively.

Sample Input 0

10
0 1 1 0 1 1 1 1 0 0
Sample Output 0

3 6
Explanation 0

Door  : Already unlocked. 
Door  : Currently locked, so unlock operation performed to unlock the door. 
Door  : Was locked, but since door  is unlocked, door  unlocks automatically. 
Door  : Already unlocked. 
Doors ,, and  are unlocked in the same fashion as doors  and . 
Door  : Already unlocked. 
Door  : Already unlocked.

Hence, a minimum of  doors need to be unlocked for all doors to be unlocked (refer diagram in challenge statement).

Similarly, a maximum of  doors need to be unlocked for all doors to be unlocked.
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int[] revisedRussianRoulette(int[] doors) {
        // Complete this function
        int n=doors.length,max=0,min=0;
        for(int i=0;i<n;i++){
            if(doors[i]==1)
                max++;
          }
        for(int i=0;i<n;i++){
            if(i< n-1 && doors[i]==1){
                
                doors[i+1]=0;
                min++;
            }
          }
        int arr[]=new int[2];
        arr[0]=min;
        arr[1]=max;
        return arr;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] doors = new int[n];
        for(int doors_i = 0; doors_i < n; doors_i++){
            doors[doors_i] = in.nextInt();
        }
        int[] result = revisedRussianRoulette(doors);
        for (int i = 0; i < result.length; i++) {
            System.out.print(result[i] + (i != result.length - 1 ? " " : ""));
        }
        System.out.println("");


        in.close();
    }
}
